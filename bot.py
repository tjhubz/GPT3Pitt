import os
import discord
import discord.ext
import ai
import sqlalchemy
from sqlalchemy import create_engine

# ------------------------------- INITIALIZATION -------------------------------
bot = discord.Bot(intents=discord.Intents.all())
TOKEN = os.getenv("DISCORD_TOKEN")

# Setup MySQL
engine = create_engine(f'mysql+mysqlconnector://{os.getenv("MYSQL_USER")}:{os.getenv("MYSQL_PASSWORD")}@{os.getenv("MYSQL_IP")}/responses', echo=False)
db = engine.connect()

# Communication to the user
warning = "\n\n*NOTICE: I am an AI that is currently being trained. My goal is to provide answers to questions, but please note that they may be incorrect. The author of this post can rate this answer with either a thumbs up or down.*"
emojis = ['\N{THUMBS UP SIGN}','\N{THUMBS DOWN SIGN}'] # Reactions to add to ai-generated messages for feedback
good_feedback = "\n\n*The author of this post rated this answer as helpful. However, please keep in mind that it was auto-generated by AI and may contain incorrect information.*"
bad_feedback = "Sorry I wasn't able to help. We will use this feedback to improve future responses."
# ------------------------------------------------------------------------------

# Bot start
@bot.event
async def on_ready():
    print("[LOG] Bot has started successfully.")


# Responds to new forum posts with an ai-generated answer
@bot.event
async def on_thread_create(thread):
    if thread.parent.name == "questions":
        print("[LOG] New question detected")
        await thread.join()
        question = thread.starting_message.channel.name+" "+thread.starting_message.content # Include post title and message
        answer = ai.ask(question)
        message = await thread.send(answer+warning)
        for emoji in emojis:
            await message.add_reaction(emoji) # Adds emojis from the initialization section to the message


# Monitors all ai-generated responses for reactions and then adds them to a database table accordingly so that the data can be used to re-train the model.
@bot.event
async def on_reaction_add(reaction, user):
    author = reaction.message.channel.owner
    emoji = reaction.emoji
    if user != author: # Only the author can rate answers
        if user.bot: # Ignore bot reactions
            return
        else:
            await reaction.message.remove_reaction(emoji, user) # Remove reaction if person giving feedback is not the author
            print("[LOG] Feedback ignored. User was not author of the post.")
    else:
        if emoji == '\N{THUMBS UP SIGN}':
            prompt = (f'{reaction.message.channel.name} {reaction.message.channel.starting_message.content}')
            response = reaction.message.content.replace(warning,'') # Remove generic warning from the message so that it can be replaced upon message edit
            sql = "INSERT INTO good (prompt, completion) VALUES (%s, %s)"
            val = (prompt, response)
            db.execute(sql, val) # Add the example of a good completion to the "good" table in the responses database.
            await reaction.message.clear_reactions() # Clear reactions so that user cannot give double feedback
            await reaction.message.edit(content=response+good_feedback) # Edit message to contain the AI response as well as a message warning that it still may not be correct.
            print("[LOG] Good feedback received.")        
        if emoji == '\N{THUMBS DOWN SIGN}':
            prompt = (f'{reaction.message.channel.name} {reaction.message.channel.starting_message.content}')
            response = reaction.message.content.replace(warning,'') # Remove generic warning from the message so that it can be replaced upon message edit
            sql = "INSERT INTO bad (prompt, completion) VALUES (%s, %s)"
            val = (prompt, response)
            db.execute(sql, val) # Add the example of a bad completion to the "bad" table in the responses database.
            await reaction.message.clear_reactions() # Clear reactions so that user cannot give double feedback
            await reaction.message.edit(content=bad_feedback, delete_after=15) # Edit message to remove the bad response as well as a message apologizing. The response will then be deleted.
            print("[LOG] Bad feedback received.")
    

bot.run(TOKEN)